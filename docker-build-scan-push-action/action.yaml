name: "Build, scan and publish a Docker image to a Docker registry"
description: "Builds a container image and pushes it to DockerHub and GitHub Packages"
inputs:
  registry: 
    description: "Name of target registry"
    required: false
    default: registry.hub.docker.com
  registry_username:
    description: "Username for target registry"
    required: true
  registry_password:
    description: "Password for target registry"
    required: true
  image_name:
    description: "Name of the Docker image to push"
    required: true
  image_tag_prefix: 
    description: "Prefix for Docker image tag (e.g. amazoncoretto)"
    required: false
    default: ''
  extra_tags: 
    description: "Extra tags for Docker image (comma-separated)"
    required: false 
  context:
    description: "Root directory for building the Docker image"
    required: false 
    default: '.'
  dockerfile_path:
    description: "Path to Dockerfile"
    required: false 
    default: 'Dockerfile'
  build_args: 
    description: "Build-time args for Docker image build (comma-separated)"
    required: false
runs:
  using: "composite"
  steps:
    - name: Prepare
      id: prep
      shell: bash
      run: |
        GIT_COMMIT=$(git rev-parse --short HEAD)
        MAIN_DOCKER_TAG="$GIT_COMMIT"
        if [ ${{inputs.image_tag_prefix}} ]; then
          MAIN_DOCKER_TAG="${{inputs.image_tag_prefix}}-${MAIN_DOCKER_TAG}"
        fi
        DOCKER_TAGS="${{ inputs.image_name }}:$MAIN_DOCKER_TAG"
        for EXTRA_TAG in $(echo ${{ inputs.extra_tags }} | tr ',' ' '); do
          DOCKER_TAGS="$DOCKER_TAGS,${{ inputs.image_name }}:$EXTRA_TAG"
        done
        echo ::set-output name=git_commit::${GIT_COMMIT}
        echo ::set-output name=main_docker_tag::${MAIN_DOCKER_TAG}
        echo ::set-output name=docker_tags::${DOCKER_TAGS}

    - name: Setup BuildX
      uses: docker/setup-buildx-action@v1

    - name: Login to the Registry
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Build Docker image from the Dockerfile
      shell: bash
      run: |
        MAIN_DOCKER_TAG=${{ steps.prep.outputs.main_docker_tag }}
        DOCKER_BUILD_ARGS="-t ${{ inputs.image_name }}:$MAIN_DOCKER_TAG ${{ inputs.context }} -f ${{ inputs.dockerfile_path }}"
        IFS=', ' read -r -a array <<< "${{ inputs.build_args }}"
        for BUILD_ARG in "${array[@]}"
        do
            DOCKER_BUILD_ARGS="$DOCKER_BUILD_ARGS --build-arg $BUILD_ARG"
        done
        docker build $DOCKER_BUILD_ARGS

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: "${{ inputs.image_name }}:${{ steps.prep.outputs.main_docker_tag }}"
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        #severity: 'CRITICAL,HIGH'

    - name: Push Docker image to registry
      shell: bash
      run: |
        MAIN_DOCKER_TAG=${{ steps.prep.outputs.main_docker_tag }}
        docker push ${{ inputs.image_name }}:${MAIN_DOCKER_TAG}

        ALL_DOCKER_TAGS=${{ steps.prep.outputs.docker_tags }}
        IFS=', ' read -r -a array <<< "$ALL_DOCKER_TAGS"
        for TAG in "${array[@]}"
        do
            docker tag ${{ inputs.image_name }}:${MAIN_DOCKER_TAG} ${{ inputs.image_name }}:${TAG}
            docker push ${{ inputs.image_name }}:${TAG}
        done

        
    # - name: Build and Push the Docker Image
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: ${{ inputs.context }}
    #     file: ${{ inputs.dockerfile_path }}
    #     push: true
    #     tags: ${{ steps.prep.outputs.docker_tags }}
    #     build-args: ${{ inputs.build_args }}
