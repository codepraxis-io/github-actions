name: Docker Build Scan Push Workflow

on:
  workflow_call:
    inputs:
      destination_registry:
        description: 'Destination Docker registry'
        required: false
        type: string
        default: 'ghcr.io/codepraxis-io'
      docker_context_dir:
        description: 'Docker context directory'
        required: false
        type: string
        default: '.'
      dockerfile_name:
        description: 'Dockerfile name'
        required: false
        type: string
        default: 'Dockerfile'
      docker_image_name:
        description: 'Docker image name'
        required: true
        type: string
      docker_image_tag:
        description: 'Docker image tag'
        required: false 
        default: ''
        type: string
      docker_image_tag_suffix:
        description: 'Docker image tag suffix'
        required: false
        default: ''
        type: string
      docker_build_type:
        description: 'Type of Docker build'
        required: false
        default: 'buildx'
        type: string
      dockerfile_scanner:
        description: 'Tool for scanning Dockerfiles'
        required: false
        default: 'trivy'
        type: string
      docker_image_scanner:
        description: 'Tool for scanning Docker image'
        required: false
        default: 'trivy'
        type: string
      scan_result_dir:
        description: 'Directory for scan results'
        required: false
        default: 'scan_results'
        type: string
      stop_on_critical_vulns:
        description: 'Whether to stop when Docker image scanner find critical vulnerabilities'
        required: false
        default: 'false'
        type: string
      docker_sbom_generator:
        description: 'Tool for generating SBOM'
        required: false
        type: string
        default: 'syft'
    secrets:
      destination_registry_username:
        required: true
      destination_registry_password:
        required: true
      cosign_private_key:
        required: true
      cosign_private_key_password:
        required: true
      cosign_public_key:
        required: true
    # outputs:
    #   docker-tag-commit:
    #     description: docker tag to be used in later actions
    #     value: ${{ jobs.docker-build-push.outputs.docker-tag-commit }}

jobs:
  docker-build-scan-push:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/codepraxis-io/ubuntu22.04:cicd
      credentials:
        username: ${{secrets.destination_registry_username}}
        password: ${{secrets.destination_registry_password}}
    env:
      DESTINATION_REGISTRY: ${{ inputs.destination_registry }}
      DOCKER_CONTEXT_DIR: ${{ inputs.docker_context_dir }}
      DOCKERFILE_NAME: ${{ inputs.dockerfile_name }}
      DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
      DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}
      DOCKER_IMAGE_TAG_SUFFIX: ${{ inputs.docker_image_tag_suffix }}
      DOCKER_BUILD_TYPE: ${{ inputs.docker_build_type }}
      DOCKERFILE_SCANNER: ${{ inputs.dockerfile_scanner }}
      DOCKER_IMAGE_SCANNER: ${{ inputs.docker_image_scanner }}
      SCAN_RESULT_DIR: ${{ inputs.scan_result_dir }}
      STOP_ON_CRITICAL_VULNS: ${{ inputs.stop_on_critical_vulns }}
      DOCKER_SBOM_GENERATOR: ${{ inputs.docker_sbom_generator }}
      DESTINATION_REGISTRY_USERNAME: ${{secrets.destination_registry_username}}
      DESTINATION_REGISTRY_PASSWORD: ${{secrets.destination_registry_password}}
      COSIGN_PRIVATE_KEY: ${{secrets.cosign_private_key}}
      COSIGN_PUBLIC_KEY: ${{secrets.cosign_public_key}}
      COSIGN_PASSWORD: ${{secrets.cosign_private_key_password}}
    steps:
      - name: Mark workspace directory as safe
        run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
        shell: bash
      - name: Code checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          GITHUB_SHA=${{github.sha}}
          GITHUB_REF=${{github.ref}}
          VERSION=${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          IMAGE_TAG=$VERSION
          if [ "$DOCKER_IMAGE_TAG" != "" ]; then
            IMAGE_TAG=$DOCKER_IMAGE_TAG
          fi
          if [ "$DOCKER_IMAGE_TAG_SUFFIX" != "" ]; then
            IMAGE_TAG="$IMAGE_TAG-$DOCKER_IMAGE_TAG_SUFFIX"
          fi
          echo ::set-output name=IMAGE_TAG::${IMAGE_TAG}
      - name: Login to destination registry
        shell: bash
        run: |
          docker login --username ${DESTINATION_REGISTRY_USERNAME} --password ${DESTINATION_REGISTRY_PASSWORD} ${DESTINATION_REGISTRY}
      - name: Verify signature of base Docker image
        shell: bash
        run: |
          FROM_IMAGE=$(grep FROM $DOCKER_CONTEXT_DIR/$DOCKERFILE_NAME | sed -r 's/FROM\s+//g')
          cosign verify --key env://COSIGN_PUBLIC_KEY $FROM_IMAGE
      - name: Build Docker image with buildx
        if: ${{ inputs.docker_build_type == 'buildx' }}
        id: build-docker-image-buildx
        shell: bash
        run: |
          IMAGE_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          echo Building $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG with buildx
          pushd $DOCKER_CONTEXT_DIR
              docker buildx build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG . -f $DOCKERFILE_NAME
          popd
      - name: Scan Docker image
        id: scan-docker-image
        shell: bash
        run: |
          IMAGE_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          mkdir -p $SCAN_RESULT_DIR
          if [ "$DOCKER_IMAGE_SCANNER" == "trivy" ]; then
            ARGS="-f json -o $SCAN_RESULT_DIR/trivy-scan-$DOCKER_IMAGE_NAME-$IMAGE_TAG.json"
            if [ "$STOP_ON_CRITICAL_VULNS" == "true" ]; then
              ARGS="--exit-code 1 --severity CRITICAL $ARGS"
            fi
            ARGS="$ARGS $DOCKER_IMAGE_NAME:$IMAGE_TAG"
            echo Running: trivy image $ARGS
            trivy image $ARGS
          fi
          if [ "$DOCKER_IMAGE_SCANNER" == "grype" ]; then
            ARGS="-o json --file $SCAN_RESULT_DIR/grype-scan-$DOCKER_IMAGE_NAME-$IMAGE_TAG.json"
            if [ "$STOP_ON_CRITICAL_VULNS" == "true" ]; then
              ARGS="-f Critical $ARGS"
            fi
            ARGS="$ARGS $DOCKER_IMAGE_NAME:$IMAGE_TAG"
            echo Running: grype $ARGS
            grype $ARGS
          fi
      - name: Generate SBOM for Docker image
        shell: bash
        run: |
          IMAGE_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          if [ "$DOCKER_SBOM_GENERATOR" == "syft" ]; then
            ARGS="-o json --file $SCAN_RESULT_DIR/syft-sbom-$DOCKER_IMAGE_NAME-$IMAGE_TAG.json packages"
            ARGS="$ARGS $DOCKER_IMAGE_NAME:$IMAGE_TAG"
            echo Running: syft $ARGS
            syft $ARGS
          fi
      - name: Upload scan results as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.SCAN_RESULT_DIR}}
          path: ${{env.SCAN_RESULT_DIR}}
      - name: Push Docker Image
        shell: bash
        run: |
          IMAGE_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          docker tag $DOCKER_IMAGE_NAME:$IMAGE_TAG $DESTINATION_REGISTRY/$DOCKER_IMAGE_NAME:$IMAGE_TAG
          docker push $DESTINATION_REGISTRY/$DOCKER_IMAGE_NAME:$IMAGE_TAG
      - name: Sign Docker image
        shell: bash
        run: |
          IMAGE_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          cosign sign --key env://COSIGN_PRIVATE_KEY $DESTINATION_REGISTRY/$DOCKER_IMAGE_NAME:$IMAGE_TAG
          cosign verify --key env://COSIGN_PUBLIC_KEY $DESTINATION_REGISTRY/$DOCKER_IMAGE_NAME:$IMAGE_TAG